=====STUDENT TESTS=====
====Good Tests====
===[good0.bminor Input]===
//some variable usages
x:integer;
y:integer;
z:integer;
arr:array[5] array[5] integer;
str: string = "hello world";
fxn : function  integer () =
{
	arr[3][2] = 5;
	x = arr[2][3];
	x++;
	return z;
	c:char = str[0];
} 
===[good0.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER z
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER arr
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 5
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 5
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
IDENTIFIER str
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello world
SEMICOLON ;
IDENTIFIER fxn
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER arr
BRACKET_OPEN [
INTEGER_LITERAL 3
BRACKET_OPEN ]
BRACKET_OPEN [
INTEGER_LITERAL 2
BRACKET_OPEN ]
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER x
ASSIGN =
IDENTIFIER arr
BRACKET_OPEN [
INTEGER_LITERAL 2
BRACKET_OPEN ]
BRACKET_OPEN [
INTEGER_LITERAL 3
BRACKET_OPEN ]
SEMICOLON ;
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
RETURN return
IDENTIFIER z
SEMICOLON ;
IDENTIFIER c
COLON :
CHAR char
ASSIGN =
IDENTIFIER str
BRACKET_OPEN [
INTEGER_LITERAL 0
BRACKET_OPEN ]
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good1.bminor Input]===
//empty program
===[good1.bminor Output]===
Success!

Parse successful!


return code: 0


===[good2.bminor Input]===
// produces correct precedence of operations

main: function void () = {
	x:integer = 5;
	y:integer = 4;
	if(true || false && true)
	{
		x = 6;
		
	}
}
===[good2.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 4
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
TRUE true
OR ||
FALSE false
AND &&
TRUE true
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 6
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good3.bminor Input]===
// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	if(!((4*x^5 + 4) - 4 >= 1))
	{
		x = 6;
		
	}
}
===[good3.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 4
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
NOT !
PARENTHESIS_OPEN (
PARENTHESIS_OPEN (
INTEGER_LITERAL 4
MULTIPLY *
IDENTIFIER x
EXPONENTIATION ^
INTEGER_LITERAL 5
PLUS +
INTEGER_LITERAL 4
PARENTHESIS_CLOSE )
SUBTRACT -
INTEGER_LITERAL 4
GTE >=
INTEGER_LITERAL 1
PARENTHESIS_CLOSE )
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 6
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good4.bminor Input]===
// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	z:boolean  = true || -(4*x^5) + (4 - 4) >= 16 - 6 * 3 + x && y^2 == 16;
}
===[good4.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 4
SEMICOLON ;
IDENTIFIER z
COLON :
BOOLEAN boolean
ASSIGN =
TRUE true
OR ||
SUBTRACT -
PARENTHESIS_OPEN (
INTEGER_LITERAL 4
MULTIPLY *
IDENTIFIER x
EXPONENTIATION ^
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
PLUS +
PARENTHESIS_OPEN (
INTEGER_LITERAL 4
SUBTRACT -
INTEGER_LITERAL 4
PARENTHESIS_CLOSE )
GTE >=
INTEGER_LITERAL 16
SUBTRACT -
INTEGER_LITERAL 6
MULTIPLY *
INTEGER_LITERAL 3
PLUS +
IDENTIFIER x
AND &&
IDENTIFIER y
EXPONENTIATION ^
INTEGER_LITERAL 2
EQ ==
INTEGER_LITERAL 16
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good5.bminor Input]===
// test block creations
x:integer;
main:function void() = {
	for(;;)
	{
		x:integer = 5;
		{
			x:integer = 6;
			print x;
		}
	}

	if(x > 5)
	{
		x++;
	}
}
funct2: function void() = {
	{
		print "hello";
	}
	if(x > 5)
		if(x < 5)
		{
			x++;
		}
	else
	{
		x++;
		x--;
	}		
	
}
===[good5.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
SEMICOLON ;
SEMICOLON ;
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 6
SEMICOLON ;
PRINT print
IDENTIFIER x
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
GT >
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
IDENTIFIER funct2
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
BRACE_OPEN {
PRINT print
STRING_LITERAL hello
SEMICOLON ;
BRACE_CLOSE }
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
GT >
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
IDENTIFIER x
DECREMENT --
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good6.bminor Input]===
// basic if else works with & without blocks
main:function void() = {
	if( 10 < 20 )
		print "hi";
	else
		print "hello";
	if( 10 < 20 )
	{
		print "hi";
	}
	else
	{
		print "hello";
	}
}
===[good6.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
LT <
INTEGER_LITERAL 20
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL hi
SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL hello
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
LT <
INTEGER_LITERAL 20
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
STRING_LITERAL hi
SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
PRINT print
STRING_LITERAL hello
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good7.bminor Input]===
//solved if else works

main: function void() = {
	x:integer = 5;
	if( 4 < 5 )
		if( 10 < 20 )
			for(x = 0; x < 5; x++)
				if( 4 < 5 )
					print "helloo\n";
				else
					print "hello\n";
		else
			print "goodbye";
}
===[good7.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 4
LT <
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
LT <
INTEGER_LITERAL 20
PARENTHESIS_CLOSE )
FOR for
PARENTHESIS_OPEN (
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER x
LT <
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER x
INCREMENT ++
PARENTHESIS_CLOSE )
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 4
LT <
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL helloo

SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL hello

SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL goodbye
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good8.bminor Input]===
//tests param lists
fxn: function integer (x:integer)=
{
	return x++;
}

fxn2: function char (x:integer, y:char, z:boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}

fxn3: function char (x: array [] integer, y:char, z: array [] array [] boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}

===[good8.bminor Output]===
Success!

IDENTIFIER fxn
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
RETURN return
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER fxn2
COLON :
FUNCTION function
CHAR char
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
CHAR char
COMMA ,
IDENTIFIER z
COLON :
BOOLEAN boolean
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER y
EQ ==
CHARACTER_LITERAL z
PARENTHESIS_CLOSE )
RETURN return
CHARACTER_LITERAL Z
SEMICOLON ;
ELSE else
RETURN return
CHARACTER_LITERAL z
SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER fxn3
COLON :
FUNCTION function
CHAR char
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
CHAR char
COMMA ,
IDENTIFIER z
COLON :
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
BOOLEAN boolean
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER y
EQ ==
CHARACTER_LITERAL z
PARENTHESIS_CLOSE )
RETURN return
CHARACTER_LITERAL Z
SEMICOLON ;
ELSE else
RETURN return
CHARACTER_LITERAL z
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good9.bminor Input]===
//test expressions inside of array indexes
arr:array [5] integer = {0,1,2,3,4};

main:function void() =
{
	x:integer = 5;
	y:integer = 3;
	arr[x - y] = 4;
	arr[y + x * 3] = arr[2+ x^2 - 1];
} 

===[good9.bminor Output]===
Success!

IDENTIFIER arr
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 5
BRACKET_OPEN ]
INTEGER integer
ASSIGN =
BRACE_OPEN {
INTEGER_LITERAL 0
COMMA ,
INTEGER_LITERAL 1
COMMA ,
INTEGER_LITERAL 2
COMMA ,
INTEGER_LITERAL 3
COMMA ,
INTEGER_LITERAL 4
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 3
SEMICOLON ;
IDENTIFIER arr
BRACKET_OPEN [
IDENTIFIER x
SUBTRACT -
IDENTIFIER y
BRACKET_OPEN ]
ASSIGN =
INTEGER_LITERAL 4
SEMICOLON ;
IDENTIFIER arr
BRACKET_OPEN [
IDENTIFIER y
PLUS +
IDENTIFIER x
MULTIPLY *
INTEGER_LITERAL 3
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER arr
BRACKET_OPEN [
INTEGER_LITERAL 2
PLUS +
IDENTIFIER x
EXPONENTIATION ^
INTEGER_LITERAL 2
SUBTRACT -
INTEGER_LITERAL 1
BRACKET_OPEN ]
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


====Bad Tests====
===[bad0.bminor Input]===
// semicolon isn't a statement
fxn:function void() =
{
	;
}
===[bad0.bminor Output]===
Success!

IDENTIFIER fxn
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad1.bminor Input]===
;
===[bad1.bminor Output]===
Success!

SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===[bad2.bminor Input]===
// two multiples should generate parse error
main: function void() =
{
	x:integer = 5 ** 5;
	print x;
}
===[bad2.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
MULTIPLY *
MULTIPLY *
INTEGER_LITERAL 5
SEMICOLON ;
PRINT print
IDENTIFIER x
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad3.bminor Input]===
// can't use anything but print in this form
printf "hello world", x, y;
===[bad3.bminor Output]===
Success!

IDENTIFIER printf
STRING_LITERAL hello world
COMMA ,
IDENTIFIER x
COMMA ,
IDENTIFIER y
SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===[bad4.bminor Input]===
// for loop without correct # of args
main:function void()=
{
	for(i=0; i++) {
		print i;
	}
}
===[bad4.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER i
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad5.bminor Input]===
//print not seperated by ,'s
x:intger = 5;
main:function void()
{
	print x x "hello";
}
===[bad5.bminor Output]===
Success!

IDENTIFIER x
COLON :
IDENTIFIER intger
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER x
IDENTIFIER x
STRING_LITERAL hello
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad6.bminor Input]===
// expressions must end with ;
x:integer = 5;

main:function void()=
{
	x++;
	x++
}
===[bad6.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
IDENTIFIER x
INCREMENT ++
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad7.bminor Input]===
// if must be matched
x:integer = 5;
main:function void()=
{
	x++;
	if(x > 5)
}
===[bad7.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
INCREMENT ++
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
GT >
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad8.bminor Input]===
//checking param lists
main:function void("hello", x:integer) =
{
	print x;
}
===[bad8.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
STRING_LITERAL hello
COMMA ,
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
PRINT print
IDENTIFIER x
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad9.bminor Input]===
//checking param lists with trailing ,
main:function void(hello:string, )=
{
	print hello;
}
===[bad9.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER hello
COLON :
STRING string
COMMA ,
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
PRINT print
IDENTIFIER hello
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[good1.bminor Output]===
Success!

IDENTIFIER n
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER m
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
IDENTIFIER b
COLON :
BOOLEAN boolean
SEMICOLON ;
IDENTIFIER c
COLON :
BOOLEAN boolean
ASSIGN =
TRUE true
SEMICOLON ;
IDENTIFIER s
COLON :
STRING string
SEMICOLON ;
IDENTIFIER t
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello

SEMICOLON ;
IDENTIFIER d
COLON :
CHAR char
SEMICOLON ;
IDENTIFIER e
COLON :
CHAR char
ASSIGN =
CHARACTER_LITERAL x
SEMICOLON ;
IDENTIFIER x
COLON :
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
STRING string
SEMICOLON ;
IDENTIFIER y
COLON :
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
STRING string
ASSIGN =
BRACE_OPEN {
STRING_LITERAL a
COMMA ,
STRING_LITERAL b
COMMA ,
STRING_LITERAL c
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER z
COLON :
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
BRACKET_OPEN ]
STRING string
ASSIGN =
BRACE_OPEN {
BRACE_OPEN {
STRING_LITERAL a
COMMA ,
STRING_LITERAL b
COMMA ,
STRING_LITERAL c
BRACE_CLOSE }
COMMA ,
BRACE_OPEN {
STRING_LITERAL x
COMMA ,
STRING_LITERAL y
COMMA ,
STRING_LITERAL z
BRACE_CLOSE }
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER g
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 3
BRACKET_OPEN ]
STRING string
SEMICOLON ;
IDENTIFIER h
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 3
BRACKET_OPEN ]
STRING string
ASSIGN =
BRACE_OPEN {
STRING_LITERAL a
COMMA ,
STRING_LITERAL b
COMMA ,
STRING_LITERAL c
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER i
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 2
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 3
BRACKET_OPEN ]
STRING string
ASSIGN =
BRACE_OPEN {
BRACE_OPEN {
STRING_LITERAL a
COMMA ,
STRING_LITERAL b
COMMA ,
STRING_LITERAL c
BRACE_CLOSE }
COMMA ,
BRACE_OPEN {
STRING_LITERAL x
COMMA ,
STRING_LITERAL y
COMMA ,
STRING_LITERAL z
BRACE_CLOSE }
BRACE_CLOSE }
SEMICOLON ;
Parse successful!


return code: 0


===[good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[good10.bminor Output]===
Success!

IDENTIFIER a
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
INTEGER integer
ASSIGN =
BRACE_OPEN {
INTEGER_LITERAL 100
COMMA ,
INTEGER_LITERAL 200
COMMA ,
INTEGER_LITERAL 300
COMMA ,
INTEGER_LITERAL 400
COMMA ,
INTEGER_LITERAL 500
COMMA ,
INTEGER_LITERAL 600
COMMA ,
INTEGER_LITERAL 700
COMMA ,
INTEGER_LITERAL 800
COMMA ,
INTEGER_LITERAL 900
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER b
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
IDENTIFIER c
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER j
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER a
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
MULTIPLY *
INTEGER_LITERAL 10
SEMICOLON ;
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
MULTIPLY *
INTEGER_LITERAL 2
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER a
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
PLUS +
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
SEMICOLON ;
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER j
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER j
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER c
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
BRACKET_OPEN [
IDENTIFIER j
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER i
MULTIPLY *
IDENTIFIER j
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER j
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER j
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER c
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
BRACKET_OPEN [
IDENTIFIER j
BRACKET_OPEN ]
SEMICOLON ;
PRINT print
STRING_LITERAL  
SEMICOLON ;
BRACE_CLOSE }
PRINT print
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good11.bminor Input]===

/* Try locally declared array lengths */


testfunc: function void (x: integer, y: integer) = {
    i: integer;
    j: integer;

    a: array [10] integer = {100,200,300,400,500,600,700,800,900};
    b: array [x] integer;
    c: array [x] array [y] integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[good11.bminor Output]===
Success!

IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER j
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER a
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
INTEGER integer
ASSIGN =
BRACE_OPEN {
INTEGER_LITERAL 100
COMMA ,
INTEGER_LITERAL 200
COMMA ,
INTEGER_LITERAL 300
COMMA ,
INTEGER_LITERAL 400
COMMA ,
INTEGER_LITERAL 500
COMMA ,
INTEGER_LITERAL 600
COMMA ,
INTEGER_LITERAL 700
COMMA ,
INTEGER_LITERAL 800
COMMA ,
INTEGER_LITERAL 900
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER b
COLON :
ARRAY array
BRACKET_OPEN [
IDENTIFIER x
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
IDENTIFIER c
COLON :
ARRAY array
BRACKET_OPEN [
IDENTIFIER x
BRACKET_OPEN ]
ARRAY array
BRACKET_OPEN [
IDENTIFIER y
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER a
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
MULTIPLY *
INTEGER_LITERAL 10
SEMICOLON ;
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 5
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
MULTIPLY *
INTEGER_LITERAL 2
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER a
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
PLUS +
IDENTIFIER b
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
SEMICOLON ;
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER j
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER j
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER c
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
BRACKET_OPEN [
IDENTIFIER j
BRACKET_OPEN ]
ASSIGN =
IDENTIFIER i
MULTIPLY *
IDENTIFIER j
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
IDENTIFIER j
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER j
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER c
BRACKET_OPEN [
IDENTIFIER i
BRACKET_OPEN ]
BRACKET_OPEN [
IDENTIFIER j
BRACKET_OPEN ]
SEMICOLON ;
PRINT print
STRING_LITERAL  
SEMICOLON ;
BRACE_CLOSE }
PRINT print
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good12.bminor Input]===

/* single statement ifs */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n";
}

===[good12.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 65
SEMICOLON ;
IDENTIFIER s
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello
SEMICOLON ;
IDENTIFIER b
COLON :
BOOLEAN boolean
ASSIGN =
FALSE false
SEMICOLON ;
IDENTIFIER min
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER a
COLON :
INTEGER integer
COMMA ,
IDENTIFIER b
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER a
GT >
IDENTIFIER b
PARENTHESIS_CLOSE )
RETURN return
IDENTIFIER a
SEMICOLON ;
ELSE else
RETURN return
IDENTIFIER b
SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
PRINT print
STRING_LITERAL minimum
COMMA ,
IDENTIFIER min
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
COMMA ,
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
COMMA ,
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good13.bminor Input]===
/* string format expr */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n", z=10, z==10;
}
	

===[good13.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 65
SEMICOLON ;
IDENTIFIER s
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello
SEMICOLON ;
IDENTIFIER b
COLON :
BOOLEAN boolean
ASSIGN =
FALSE false
SEMICOLON ;
IDENTIFIER min
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER a
COLON :
INTEGER integer
COMMA ,
IDENTIFIER b
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER a
GT >
IDENTIFIER b
PARENTHESIS_CLOSE )
RETURN return
IDENTIFIER a
SEMICOLON ;
ELSE else
RETURN return
IDENTIFIER b
SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
PRINT print
STRING_LITERAL minimum
COMMA ,
IDENTIFIER min
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
COMMA ,
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
COMMA ,
STRING_LITERAL 

COMMA ,
IDENTIFIER z
ASSIGN =
INTEGER_LITERAL 10
COMMA ,
IDENTIFIER z
EQ ==
INTEGER_LITERAL 10
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good14.bminor Input]===

/* returning various expressions */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	return x;
	return "hello";
	return x = 10;
	return x == 10;
	return x > 5;
	return testfunc(x, y, z);
}

===[good14.bminor Output]===
Success!

IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
COMMA ,
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
RETURN return
IDENTIFIER x
SEMICOLON ;
RETURN return
STRING_LITERAL hello
SEMICOLON ;
RETURN return
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
RETURN return
IDENTIFIER x
EQ ==
INTEGER_LITERAL 10
SEMICOLON ;
RETURN return
IDENTIFIER x
GT >
INTEGER_LITERAL 5
SEMICOLON ;
RETURN return
IDENTIFIER testfunc
PARENTHESIS_OPEN (
IDENTIFIER x
COMMA ,
IDENTIFIER y
COMMA ,
IDENTIFIER z
PARENTHESIS_CLOSE )
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good15.bminor Input]===


/* code blocks */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	{
		return x;
		return "hello";
		return x = 10;
	}
	{
		return x == 10;
		{
			return x > 5;
			return testfunc(x, y, z);
		}
	}
}

===[good15.bminor Output]===
Success!

IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
COMMA ,
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
BRACE_OPEN {
RETURN return
IDENTIFIER x
SEMICOLON ;
RETURN return
STRING_LITERAL hello
SEMICOLON ;
RETURN return
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
BRACE_CLOSE }
BRACE_OPEN {
RETURN return
IDENTIFIER x
EQ ==
INTEGER_LITERAL 10
SEMICOLON ;
BRACE_OPEN {
RETURN return
IDENTIFIER x
GT >
INTEGER_LITERAL 5
SEMICOLON ;
RETURN return
IDENTIFIER testfunc
PARENTHESIS_OPEN (
IDENTIFIER x
COMMA ,
IDENTIFIER y
COMMA ,
IDENTIFIER z
PARENTHESIS_CLOSE )
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}

===[good2.bminor Output]===
Success!

IDENTIFIER ComputeAscii
COLON :
FUNCTION function
CHAR char
PARENTHESIS_OPEN (
IDENTIFIER c
COLON :
CHAR char
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER GetLength
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER s
COLON :
STRING string
COMMA ,
IDENTIFIER i
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER GetArea
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER width
COLON :
INTEGER integer
COMMA ,
IDENTIFIER height
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
RETURN return
IDENTIFIER width
MULTIPLY *
IDENTIFIER height
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}

===[good3.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
IDENTIFIER s
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello world
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[good4.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
BOOLEAN boolean
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER z
COLON :
INTEGER integer
ASSIGN =
IDENTIFIER x
MULTIPLY *
IDENTIFIER y
SEMICOLON ;
IDENTIFIER z
ASSIGN =
INTEGER_LITERAL 16
PLUS +
IDENTIFIER x
DIVIDE /
IDENTIFIER y
SEMICOLON ;
PRINT print
STRING_LITERAL input is: 
COMMA ,
IDENTIFIER x
COMMA ,
STRING_LITERAL  and 
COMMA ,
IDENTIFIER y
COMMA ,
STRING_LITERAL 

SEMICOLON ;
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
IDENTIFIER y
PARENTHESIS_CLOSE )
BRACE_OPEN {
RETURN return
TRUE true
SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
RETURN return
FALSE false
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
Parse successful!


return code: 0


===[good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */
/* Add some float */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;
	
     // A float declaration
     q: float = 10e9;
     
     // another float
     v: float = 2.10e2;

     // a float operation
     return v;

}

===[good5.bminor Output]===
TEST NOT PASSED

IDENTIFIER simplefunc
COLON :
FUNCTION function
BOOLEAN boolean
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER z
COLON :
INTEGER integer
ASSIGN =
IDENTIFIER x
MULTIPLY *
IDENTIFIER y
SEMICOLON ;
IDENTIFIER q
COLON :
IDENTIFIER float
ASSIGN =
FLOAT_LITERAL 10e9
SEMICOLON ;
IDENTIFIER v
COLON :
IDENTIFIER float
ASSIGN =
FLOAT_LITERAL 2.10e2
SEMICOLON ;
RETURN return
IDENTIFIER v
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[good6.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER r
COLON :
INTEGER integer
COMMA ,
IDENTIFIER s
COLON :
INTEGER integer
COMMA ,
IDENTIFIER t
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER r
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER i
COMMA ,
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER s
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER i
COMMA ,
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER r
SEMICOLON ;
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER i
COMMA ,
STRING_LITERAL 

SEMICOLON ;
IDENTIFIER i
INCREMENT ++
SEMICOLON ;
BRACE_CLOSE }
FOR for
PARENTHESIS_OPEN (
SEMICOLON ;
SEMICOLON ;
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL forever!

SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[good7.bminor Output]===
Success!

IDENTIFIER testit
COLON :
FUNCTION function
BOOLEAN boolean
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
IDENTIFIER y
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL less

SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL low

SEMICOLON ;
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
IDENTIFIER y
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
STRING_LITERAL less

SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
PRINT print
STRING_LITERAL low

SEMICOLON ;
BRACE_CLOSE }
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 20
LT <
INTEGER_LITERAL 10
PARENTHESIS_CLOSE )
IF if
PARENTHESIS_OPEN (
INTEGER_LITERAL 10
LT <
INTEGER_LITERAL 20
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL incorrect!
SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL dangling else!
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
GT >
IDENTIFIER y
PARENTHESIS_CLOSE )
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER x
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
PRINT print
IDENTIFIER i
COMMA ,
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER y
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
PRINT print
IDENTIFIER i
COMMA ,
STRING_LITERAL 

SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
IDENTIFIER i
LT <
IDENTIFIER x
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
PARENTHESIS_CLOSE )
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER i
LT <
IDENTIFIER x
PARENTHESIS_CLOSE )
PRINT print
STRING_LITERAL small
SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL large
SEMICOLON ;
BRACE_CLOSE }
RETURN return
TRUE true
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}

===[good8.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 65
SEMICOLON ;
IDENTIFIER s
COLON :
STRING string
ASSIGN =
STRING_LITERAL hello
SEMICOLON ;
IDENTIFIER b
COLON :
BOOLEAN boolean
ASSIGN =
FALSE false
SEMICOLON ;
IDENTIFIER min
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER a
COLON :
INTEGER integer
COMMA ,
IDENTIFIER b
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER a
LT <
IDENTIFIER b
PARENTHESIS_CLOSE )
RETURN return
IDENTIFIER a
SEMICOLON ;
ELSE else
RETURN return
IDENTIFIER b
SEMICOLON ;
BRACE_CLOSE }
IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
IDENTIFIER x
MULTIPLY *
PARENTHESIS_OPEN (
IDENTIFIER x
MULTIPLY *
INTEGER_LITERAL 10
PLUS +
INTEGER_LITERAL 55
MODULUS %
INTEGER_LITERAL 6
PLUS +
IDENTIFIER z
DIVIDE /
INTEGER_LITERAL 10
PARENTHESIS_CLOSE )
SEMICOLON ;
PRINT print
STRING_LITERAL y: 
COMMA ,
IDENTIFIER y
COMMA ,
STRING_LITERAL 

SEMICOLON ;
IDENTIFIER c
COLON :
BOOLEAN boolean
ASSIGN =
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
INTEGER_LITERAL 100
AND &&
IDENTIFIER y
GT >
INTEGER_LITERAL 200
PARENTHESIS_CLOSE )
OR ||
NOT !
PARENTHESIS_OPEN (
IDENTIFIER b
ASSIGN =
TRUE true
PARENTHESIS_CLOSE )
SEMICOLON ;
PRINT print
STRING_LITERAL c: 
COMMA ,
IDENTIFIER c
COMMA ,
STRING_LITERAL 

SEMICOLON ;
IDENTIFIER d
COLON :
BOOLEAN boolean
ASSIGN =
PARENTHESIS_OPEN (
IDENTIFIER s
EQ ==
STRING_LITERAL goodbye
PARENTHESIS_CLOSE )
SEMICOLON ;
PRINT print
STRING_LITERAL d: 
COMMA ,
IDENTIFIER d
COMMA ,
STRING_LITERAL 

SEMICOLON ;
IDENTIFIER z
ASSIGN =
IDENTIFIER y
ASSIGN =
IDENTIFIER x
SEMICOLON ;
IDENTIFIER a
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 100
BRACKET_OPEN ]
INTEGER integer
SEMICOLON ;
IDENTIFIER y
ASSIGN =
IDENTIFIER min
PARENTHESIS_OPEN (
IDENTIFIER a
BRACKET_OPEN [
INTEGER_LITERAL 10
BRACKET_OPEN ]
COMMA ,
IDENTIFIER a
BRACKET_OPEN [
INTEGER_LITERAL 20
BRACKET_OPEN ]
PARENTHESIS_CLOSE )
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


===[good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[good9.bminor Output]===
Success!

IDENTIFIER testfunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
COMMA ,
IDENTIFIER y
COLON :
INTEGER integer
COMMA ,
IDENTIFIER z
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER r
COLON :
INTEGER integer
SEMICOLON ;
IDENTIFIER b
COLON :
BOOLEAN boolean
SEMICOLON ;
IDENTIFIER r
ASSIGN =
PARENTHESIS_OPEN (
IDENTIFIER x
PLUS +
IDENTIFIER y
PARENTHESIS_CLOSE )
DIVIDE /
IDENTIFIER z
SEMICOLON ;
IDENTIFIER r
ASSIGN =
IDENTIFIER x
PLUS +
PARENTHESIS_OPEN (
IDENTIFIER y
PLUS +
IDENTIFIER z
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER b
ASSIGN =
PARENTHESIS_OPEN (
TRUE true
OR ||
FALSE false
PARENTHESIS_CLOSE )
AND &&
PARENTHESIS_OPEN (
FALSE false
OR ||
TRUE true
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER r
ASSIGN =
IDENTIFIER x
PLUS +
PARENTHESIS_OPEN (
IDENTIFIER y
DIVIDE /
IDENTIFIER z
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER r
ASSIGN =
PARENTHESIS_OPEN (
IDENTIFIER x
PLUS +
IDENTIFIER y
PARENTHESIS_CLOSE )
PLUS +
IDENTIFIER z
SEMICOLON ;
IDENTIFIER b
ASSIGN =
PARENTHESIS_OPEN (
IDENTIFIER x
PLUS +
IDENTIFIER y
PARENTHESIS_CLOSE )
LT <
PARENTHESIS_OPEN (
IDENTIFIER x
PLUS +
IDENTIFIER z
PARENTHESIS_CLOSE )
SEMICOLON ;
IDENTIFIER b
ASSIGN =
PARENTHESIS_OPEN (
TRUE true
AND &&
FALSE false
PARENTHESIS_CLOSE )
OR ||
PARENTHESIS_OPEN (
FALSE false
AND &&
TRUE true
PARENTHESIS_CLOSE )
SEMICOLON ;
BRACE_CLOSE }
Parse successful!


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* A program is a not an expression at the top level */

x = 5;


===[bad1.bminor Output]===
Success!

IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 5
SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===[bad10.bminor Input]===
/* Unbalanced braces */

main:function integer ( x: integer ) =
{
	if(x<10) {
              if(x!=23) {
                  print "hello";
              } else {
                  print "goodbye";
              }
        print "too few braces";
}

===[bad10.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
INTEGER_LITERAL 10
PARENTHESIS_CLOSE )
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
NOT_EQ !=
INTEGER_LITERAL 23
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
STRING_LITERAL hello
SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
PRINT print
STRING_LITERAL goodbye
SEMICOLON ;
BRACE_CLOSE }
PRINT print
STRING_LITERAL too few braces
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad11.bminor Input]===
/* return return */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;

     return return;

}

===[bad11.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
RETURN return
RETURN return
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad12.bminor Input]===
/* invalid keyword usage */

simplefunc: function void () = {
     x: integer = 10;
     array: integer = 20;

     return x + array;
}

===[bad12.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
ARRAY array
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
RETURN return
IDENTIFIER x
PLUS +
ARRAY array
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad13.bminor Input]===

/* empty array initializer */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;
	
     p: array [5] integer = {};
}

===[bad13.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
IDENTIFIER p
COLON :
ARRAY array
BRACKET_OPEN [
INTEGER_LITERAL 5
BRACKET_OPEN ]
INTEGER integer
ASSIGN =
BRACE_OPEN {
BRACE_CLOSE }
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad14.bminor Input]===

/* Array declaration attempt */


simplefunc: function void () = {
	c7: array [x] char = {'C', 'E', 'G', "Bb"};
	d7: array [c7;] char = c7 + 1; 
}

===[bad14.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER c7
COLON :
ARRAY array
BRACKET_OPEN [
IDENTIFIER x
BRACKET_OPEN ]
CHAR char
ASSIGN =
BRACE_OPEN {
CHARACTER_LITERAL C
COMMA ,
CHARACTER_LITERAL E
COMMA ,
CHARACTER_LITERAL G
COMMA ,
STRING_LITERAL Bb
BRACE_CLOSE }
SEMICOLON ;
IDENTIFIER d7
COLON :
ARRAY array
BRACKET_OPEN [
IDENTIFIER c7
SEMICOLON ;
BRACKET_OPEN ]
CHAR char
ASSIGN =
IDENTIFIER c7
PLUS +
INTEGER_LITERAL 1
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad2.bminor Input]===
/* A program is a not a sequence of statements */

print "hello world";
return 5;

===[bad2.bminor Output]===
Success!

PRINT print
STRING_LITERAL hello world
SEMICOLON ;
RETURN return
INTEGER_LITERAL 5
SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===[bad3.bminor Input]===
/* Cannot have more elses than ifs */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;

     if(x<y) if(y>x) else print "a"; else print "b" else print "c";
}

===[bad3.bminor Output]===
Success!

IDENTIFIER simplefunc
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER y
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 20
SEMICOLON ;
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
IDENTIFIER y
PARENTHESIS_CLOSE )
IF if
PARENTHESIS_OPEN (
IDENTIFIER y
GT >
IDENTIFIER x
PARENTHESIS_CLOSE )
ELSE else
PRINT print
STRING_LITERAL a
SEMICOLON ;
ELSE else
PRINT print
STRING_LITERAL b
ELSE else
PRINT print
STRING_LITERAL c
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad4.bminor Input]===
/* For loop does need to have semis even if parts are missing */

main: function void() =
{
        i: integer;
	for(i=0;) print i;
}

===[bad4.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IDENTIFIER i
COLON :
INTEGER integer
SEMICOLON ;
FOR for
PARENTHESIS_OPEN (
IDENTIFIER i
ASSIGN =
INTEGER_LITERAL 0
SEMICOLON ;
PARENTHESIS_CLOSE )
PRINT print
IDENTIFIER i
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad5.bminor Input]===
/* Print statement must separate elemnts with a comma */

main:function void()
{
	print x y z;
}

===[bad5.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
IDENTIFIER x
IDENTIFIER y
IDENTIFIER z
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad6.bminor Input]===
/* Function parameters must separate with a comma */

main:function void( x:integer y:integer );

===[bad6.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
VOID void
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
IDENTIFIER y
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===[bad7.bminor Input]===
/* No invalid seqeuences of operators */

main:function integer ( x:integer ) = {

        return x + * 5 * - 7;
}

===[bad7.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
RETURN return
IDENTIFIER x
PLUS +
MULTIPLY *
INTEGER_LITERAL 5
MULTIPLY *
SUBTRACT -
INTEGER_LITERAL 7
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad8.bminor Input]===
/* Unbalanced parentheses */

main:function integer( x: integer ) =
{
	return (x*(x+5);
}

===[bad8.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
RETURN return
PARENTHESIS_OPEN (
IDENTIFIER x
MULTIPLY *
PARENTHESIS_OPEN (
IDENTIFIER x
PLUS +
INTEGER_LITERAL 5
PARENTHESIS_CLOSE )
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad9.bminor Input]===
/* Unbalanced braces */

main:function integer ( x: integer ) =
{
	if(x<10) {
              if(x!=23) {
                  print "hello";
              } else {
                  print "goodbye";
              }
        }

    }
    print "too many braces";
}

===[bad9.bminor Output]===
Success!

IDENTIFIER main
COLON :
FUNCTION function
INTEGER integer
PARENTHESIS_OPEN (
IDENTIFIER x
COLON :
INTEGER integer
PARENTHESIS_CLOSE )
ASSIGN =
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
LT <
INTEGER_LITERAL 10
PARENTHESIS_CLOSE )
BRACE_OPEN {
IF if
PARENTHESIS_OPEN (
IDENTIFIER x
NOT_EQ !=
INTEGER_LITERAL 23
PARENTHESIS_CLOSE )
BRACE_OPEN {
PRINT print
STRING_LITERAL hello
SEMICOLON ;
BRACE_CLOSE }
ELSE else
BRACE_OPEN {
PRINT print
STRING_LITERAL goodbye
SEMICOLON ;
BRACE_CLOSE }
BRACE_CLOSE }
BRACE_CLOSE }
PRINT print
STRING_LITERAL too many braces
SEMICOLON ;
BRACE_CLOSE }
parse error: syntax error
Parse failed.


return code: 1


===[bad15.bminor Input]===
/* */

x: integer = 10;

x = 15;

===[bad15.bminor Output]===
Success!

IDENTIFIER x
COLON :
INTEGER integer
ASSIGN =
INTEGER_LITERAL 10
SEMICOLON ;
IDENTIFIER x
ASSIGN =
INTEGER_LITERAL 15
SEMICOLON ;
parse error: syntax error
Parse failed.


return code: 1


===== SUMMARIZED PARSER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 14,
      "incorrect": 1
    },
    "Bad": {
      "correct": 15,
      "incorrect": 0
    }
  }
}

Parser Project Grade
-------------------

General Structure: 22/25
---------------------------------
Overall structure is correct. Scanner tokens should
not be printed out during parsing

Eliminating Ambiguities: 10/10
--------------------------------------
no conflicts reported

Student Tests: 20/20
---------------------------
Passes all your tests.

Hidden Tests: 34/35
---------------------------
fails one hidden test, see above

Code Style: 10/10
------------------------
grammar looks well organized. nice work

Total: 96/100
------------------------------------------
