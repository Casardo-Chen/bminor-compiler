=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good0.bminor Input]===
x: integer;
y: boolean;
z: void;
s: char;
t: string;
a: integer = 500000;
a: char = "this is a test";
z: float = 8.34;
z: float = 3E2;
b: boolean = true;
b: boolean = false;
c: char = 'a';
e: integer = something;
===[STUDENT TESTS/good0.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good0.bminor Output]===
x: integer;
y: boolean;
z: void;
s: char;
t: string;
a: integer = 500000;
a: char = "this is a test";
z: float = 8.34;
z: float = 300;
b: boolean = true;
b: boolean = false;
c: char = 'a';
e: integer = something;




===[STUDENT TESTS/good1.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}
===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
ComputeAscii: function char ( c: char );
GetLength: function integer ( s: string, i: integer );
GetArea: function integer ( width: integer, height: integer ) = {
    return width*height;
}





===[STUDENT TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}
===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
a: array [10] integer = {100, 200, 300, 400, 500, 600, 700, 800, 900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void (  ) = {
    i: integer;
    j: integer;
    for (i=0; i<10; i++) {
        b[i]=a[i]*10;
    }
    for (i=0; i<5; i++) {
        b[i*2]=a[i]+b[i];
    }
    for (j=0; j<10; i++) {
        for (i=0; i<10; i++) {
            c[i][j]=i*j;
        }
    }
    for (j=0; j<10; i++) {
        for (i=0; i<10; i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}





===[STUDENT TESTS/good11.bminor Input]===
simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;
	
     // A float declaration
     q: float = 10e9;
     
     // another float
     v: float = 2.10e2;

     // a float operation
     return v;

}
===[STUDENT TESTS/good11.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good11.bminor Output]===
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    q: float = 1e+10;
    v: float = 210;
    return v;
}





===[STUDENT TESTS/good12.bminor Input]===
//test expressions inside of array indexes
arr:array [5] integer = {0,1,2,3,4};

main:function void() =
{
	x:integer = 5;
	y:integer = 3;
	arr[x - y] = 4;
	arr[y + x * 3] = arr[2+ x^2 - 1];
} 
===[STUDENT TESTS/good12.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good12.bminor Output]===
arr: array [5] integer = {0, 1, 2, 3, 4};
main: function void (  ) = {
    x: integer = 5;
    y: integer = 3;
    arr[x-y]=4;
    arr[y+x*3]=arr[2+x^2-1];
}





===[STUDENT TESTS/good13.bminor Input]===
//solved if else works

main: function void() = {
	x:integer = 5;
	if( 4 < 5 )
		if( 10 < 20 )
			for(x = 0; x < 5; x++)
				if( 4 < 5 )
					print "helloo\n";
				else
					print "hello\n";
		else
			print "goodbye";
}
===[STUDENT TESTS/good13.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good13.bminor Output]===
main: function void (  ) = {
    x: integer = 5;
    if (4<5) {
        if (10<20) {
            for (x=0; x<5; x++) {
                if (4<5) {
                    print "helloo\n";
                } else {
                    print "hello\n";
                }
            }
        } else {
            print "goodbye";
        }
    }
}





===[STUDENT TESTS/good14.bminor Input]===
// test block creations
x:integer;
main:function void() = {
	for(;;)
	{
		x:integer = 5;
		{
			x:integer = 6;
			print x;
		}
	}

	if(x > 5)
	{
		x++;
	}
}
funct2: function void() = {
	{
		print "hello";
	}
	if(x > 5)
		if(x < 5)
		{
			x++;
		}
	else
	{
		x++;
		x--;
	}		
	
}
===[STUDENT TESTS/good14.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good14.bminor Output]===
x: integer;
main: function void (  ) = {
    for (; ; ) {
        x: integer = 5;
        {
            x: integer = 6;
            print x;
        }
    }
    if (x>5) {
        x++;
    }
}

funct2: function void (  ) = {
    {
        print "hello";
    }
    if (x>5) {
        if (x<5) {
            x++;
        } else {
            x++;
            x--;
        }
    }
}





===[STUDENT TESTS/good15.bminor Input]===
c: char = '\t';
c: char = '\r';
===[STUDENT TESTS/good15.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good15.bminor Output]===
c: char = '\t';
c: char = '\r';




===[STUDENT TESTS/good16.bminor Input]===
//solved if else works

main: function void() = {
	x:integer = 5;
	if( 4 < 5 )
		if( 10 < 20 )
			for(x = 0; x < 5; x++)
				if( 4 < 5 )
					print "helloo\n";
				else
					print "hello\n";
		else
			print "goodbye";
}
===[STUDENT TESTS/good16.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good16.bminor Output]===
main: function void (  ) = {
    x: integer = 5;
    if (4<5) {
        if (10<20) {
            for (x=0; x<5; x++) {
                if (4<5) {
                    print "helloo\n";
                } else {
                    print "hello\n";
                }
            }
        } else {
            print "goodbye";
        }
    }
}





===[STUDENT TESTS/good17.bminor Input]===
/* Check for parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

                        // Parens not required
	  r =   x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}
===[STUDENT TESTS/good17.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good17.bminor Output]===
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    r=(x+y)/z;
    r=x+(y+z);
    b=(true||false)&&(false||true);
    r=x+y/z;
    r=x+y+z;
    b=x+y<x+z;
    b=true&&false||false&&true;
}





===[STUDENT TESTS/good18.bminor Input]===
/*
This program displays a square bouncing around on the screen.
Click to reset the square in a new place.
It makes use of the (included) C gfx library and the standard C library,
and exercises, loops, comparisons, and logical operators.
*/

/* These are the functions in the gfx library. */
gfx_open: function void ( width: integer, height: integer, title:string );
gfx_point: function void ( x: integer, y: integer );
gfx_line: function void ( x1:integer, y1:integer, x2:integer, y2:integer );
gfx_color: function void ( red:integer, green: integer, blue:integer );
gfx_clear: function void ();
gfx_clear_color: function void ( red:integer, green: integer, blue:integer );
gfx_wait: function char ();
gfx_xpos: function integer ();
gfx_ypos: function integer ();
gfx_xsize: function integer ();
gfx_ysize: function integer ();
gfx_event_waiting: function boolean ();
gfx_flush: function integer ();

/* These functions come from the C standard library. */

usleep: function void ( usecs: integer );
rand: function integer();

draw_box: function void ( x: integer, y:integer, size: integer ) =
{
	gfx_color(255,255,255);
	gfx_line(x,y,x+size,y);
	gfx_line(x+size,y,x+size,y+size);
	gfx_line(x+size,y+size,x,y+size);
	gfx_line(x,y+size,x,y);
}

/*
Note that the precision multiplier indicates fixed-point
match to keep track of sub-pixel position and velocity for the box.
*/

main: function integer () =
{
	precision: integer = 100;

	xsize: integer = 500; // pixels
	ysize: integer = 500; // pixels 

	x: integer = precision * xsize / 2;
	y: integer = precision * ysize / 2;

	vx: integer = precision * 3;
	vy: integer = precision * -5 ;

	deltat: integer = 100;

	gfx_open(xsize,ysize,"Bounce!");

	for(;;) {
		print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";

		if(gfx_event_waiting()) {
			c: char;
			c = gfx_wait();
			if(c=='q') return 0;
			x = gfx_xpos()*precision;
			y = gfx_ypos()*precision;
			vx = 5*precision;
		}

		vy = vy + 1 * precision;

		if(x<0 && vx<0) {
			vx = -9*vx/10;
		}	

		if(x>(xsize*precision) && vx>0) {
			vx = -9*vx/10;
		}

		if(y>(ysize*precision) && vy>0) {
			vy = -9*vy/10;
		}

		x = x + vx*deltat/precision;
		y = y + vy*deltat/precision;

		gfx_clear();
		draw_box(x/precision,y/precision,25);
		gfx_flush();

		usleep(deltat*precision);
	}
}
===[STUDENT TESTS/good18.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good18.bminor Output]===
gfx_open: function void ( width: integer, height: integer, title: string );
gfx_point: function void ( x: integer, y: integer );
gfx_line: function void ( x1: integer, y1: integer, x2: integer, y2: integer );
gfx_color: function void ( red: integer, green: integer, blue: integer );
gfx_clear: function void (  );
gfx_clear_color: function void ( red: integer, green: integer, blue: integer );
gfx_wait: function char (  );
gfx_xpos: function integer (  );
gfx_ypos: function integer (  );
gfx_xsize: function integer (  );
gfx_ysize: function integer (  );
gfx_event_waiting: function boolean (  );
gfx_flush: function integer (  );
usleep: function void ( usecs: integer );
rand: function integer (  );
draw_box: function void ( x: integer, y: integer, size: integer ) = {
    gfx_color(255, 255, 255);
    gfx_line(x, y, x+size, y);
    gfx_line(x+size, y, x+size, y+size);
    gfx_line(x+size, y+size, x, y+size);
    gfx_line(x, y+size, x, y);
}

main: function integer (  ) = {
    precision: integer = 100;
    xsize: integer = 500;
    ysize: integer = 500;
    x: integer = precision*xsize/2;
    y: integer = precision*ysize/2;
    vx: integer = precision*3;
    vy: integer = precision*-5;
    deltat: integer = 100;
    gfx_open(xsize, ysize, "Bounce!");
    for (; ; ) {
        print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";
        if (gfx_event_waiting()) {
            c: char;
            c=gfx_wait();
            if (c=='q') {
                return 0;
            }
            x=gfx_xpos()*precision;
            y=gfx_ypos()*precision;
            vx=5*precision;
        }
        vy=vy+1*precision;
        if (x<0&&vx<0) {
            vx=-9*vx/10;
        }
        if (x>xsize*precision&&vx>0) {
            vx=-9*vx/10;
        }
        if (y>ysize*precision&&vy>0) {
            vy=-9*vy/10;
        }
        x=x+vx*deltat/precision;
        y=y+vy*deltat/precision;
        gfx_clear();
        draw_box(x/precision, y/precision, 25);
        gfx_flush();
        usleep(deltat*precision);
    }
}





===[STUDENT TESTS/good19.bminor Input]===
//empty program
===[STUDENT TESTS/good19.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good19.bminor Output]===




===[STUDENT TESTS/good2.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}
===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
simplefunc: function void (  ) = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
}





===[STUDENT TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}
===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=16+x/y;
    print "input is: ", x, " and ", y, "\n";
    if (x<y) {
        return true;
    } else {
        return false;
    }
}





===[STUDENT TESTS/good4.bminor Input]===
// test print statements
str:string = "this is a string";
str2:string;
x:integer = +8;
main: function void () = {
	print;
	print "\n \r \t \0xFF";
	print x, y, "hello", true, false;
	print str, " str ", x, str2; 
}
===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
str: string = "this is a string";
str2: string;
x: integer = +8;
main: function void (  ) = {
    print;
    print "\n \r \t \0xFF";
    print x, y, "hello", true, false;
    print str, " str ", x, str2;
}





===[STUDENT TESTS/good5.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}
===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
simplefunc: function void ( r: integer, s: integer, t: integer ) = {
    i: integer;
    for (i=0; i<r; i++) {
        print i, "\n";
    }
    i=0;
    for (; i<s; i++) {
        print i, "\n";
    }
    i=0;
    for (; i<r; ) {
        print i, "\n";
        i++;
    }
    for (; ; ) {
        print "forever!\n";
    }
}





===[STUDENT TESTS/good6.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}
===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
testit: function boolean ( x: integer, y: integer ) = {
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    }
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    }
    if (20<10) {
        if (10<20) {
            print "incorrect!";
        } else {
            print "dangling else!";
        }
    }
    if (x>y) {
        i: integer;
        for (i=0; i<x; i++) {
            print i, "\n";
        }
    } else {
        i: integer;
        for (i=0; i<y; i++) {
            print i, "\n";
        }
    }
    i: integer;
    for (i=0; i<x; i++) {
        if (i<x) {
            print "small";
        } else {
            print "large";
        }
    }
    return true;
}





===[STUDENT TESTS/good7.bminor Input]===
/* Display fibonnaci numbers from 0 to 45. */
fib: function integer ( x: integer ) = {
if( x<1 ) { return 0; } else {
if((x<2)) { return 1; } else {
return fib((x)-1) + fib((x-2)); // recursive step
} }}
===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
fib: function integer ( x: integer ) = {
    if (x<1) {
        return 0;
    } else {
        if (x<2) {
            return 1;
        } else {
            return fib(x-1)+fib(x-2);
        }
    }
}





===[STUDENT TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}
===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a<b) {
        return a;
    } else {
        return b;
    }
}

testfunc: function void ( z: integer ) = {
    y: integer = x*(x*10+55%6+z/10);
    print "y: ", y, "\n";
    c: boolean = x<100&&y>200||!(b=true);
    print "c: ", c, "\n";
    d: boolean = s=="goodbye";
    print "d: ", d, "\n";
    z=y=x;
    a: array [100] integer;
    y=min(a[10], a[20]);
}





===[STUDENT TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}
===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    r: integer;
    b: boolean;
    r=(x+y)/z;
    r=x+(y+z);
    b=(true||false)&&(false||true);
    r=x+y/z;
    r=x+y+z;
    b=x+y<x+z;
    b=true&&false||false&&true;
}





====Bad Tests====
=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';

f: float = 1.23;

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';
f: float = 1.23;
x: array [] string;
y: array [] string = {"a", "b", "c"};
z: array [] array [] string = {{"a", "b", "c"},{"x", "y", "z"}};
g: array [3] string;
h: array [3] string = {"a", "b", "c"};
i: array [2] array [3] string = {{"a", "b", "c"},{"x", "y", "z"}};




===[HIDDEN TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
a: array [10] integer = {100, 200, 300, 400, 500, 600, 700, 800, 900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void (  ) = {
    i: integer;
    j: integer;
    for (i=0; i<10; i++) {
        b[i]=a[i]*10;
    }
    for (i=0; i<5; i++) {
        b[i*2]=a[i]+b[i];
    }
    for (j=0; j<10; i++) {
        for (i=0; i<10; i++) {
            c[i][j]=i*j;
        }
    }
    for (j=0; j<10; i++) {
        for (i=0; i<10; i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}





===[HIDDEN TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: float, height: float ) =
{
	return width * height;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
ComputeAscii: function char ( c: char );
GetLength: function integer ( s: string, i: integer );
GetArea: function integer ( width: float, height: float ) = {
    return width*height;
}





===[HIDDEN TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
     f: float = 3.3e1;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
simplefunc: function void (  ) = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
    f: float = 33;
}





===[HIDDEN TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 - x / y;

     r: integer = x + (y + z);

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x <= y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=16-x/y;
    r: integer = x+(y+z);
    print "input is: ", x, " and ", y, "\n";
    if (x<=y) {
        return true;
    } else {
        return false;
    }
}





===[HIDDEN TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
simplefunc: function boolean ( x: integer, y: integer ) = {
    z: integer = x*y;
    z=16+x/y;
    print "input is: ", x, " and ", y, "\n";
    if (x<y) {
        return true;
    } else {
        return false;
    }
}





===[HIDDEN TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
simplefunc: function void ( r: integer, s: integer, t: integer ) = {
    i: integer;
    for (i=0; i<r; i++) {
        print i, "\n";
    }
    i=0;
    for (; i<s; i++) {
        print i, "\n";
    }
    i=0;
    for (; i<r; ) {
        print i, "\n";
        i++;
    }
    for (; ; ) {
        print "forever!\n";
    }
}





===[HIDDEN TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
testit: function boolean ( x: integer, y: integer ) = {
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    }
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    }
    if (20<10) {
        if (10<20) {
            print "incorrect!";
        } else {
            print "dangling else!";
        }
    }
    if (x>y) {
        i: integer;
        for (i=0; i<x; i++) {
            print i, "\n";
        }
    } else {
        i: integer;
        for (i=0; i<y; i++) {
            print i, "\n";
        }
    }
    i: integer;
    for (i=0; i<x; i++) {
        if (i<x) {
            print "small";
        } else {
            print "large";
        }
    }
    return true;
}





===[HIDDEN TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer ( a: integer, b: integer ) = {
    if (a<b) {
        return a;
    } else {
        return b;
    }
}

testfunc: function void ( z: integer ) = {
    y: integer = x*(x*10+55%6+z/10);
    print "y: ", y, "\n";
    c: boolean = x<100&&y>200||!(b=true);
    print "c: ", c, "\n";
    d: boolean = s=="goodbye";
    print "d: ", d, "\n";
    z=y=x;
    a: array [100] integer;
    y=min(a[10], a[20]);
    f: float = 3.4+5.6;
    g: float = 3.41e+08+9900;
}





===[HIDDEN TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
testfunc: function void ( x: integer, y: integer, z: integer ) = {
    r: integer;
    b: boolean;
    r=(x+y)/z;
    r=x+(y+z);
    b=(true||false)&&(false||true);
    r=x+y/z;
    r=x+y+z;
    b=x+y<x+z;
    b=true&&false||false&&true;
}





====Bad Tests====
===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 20,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

General Structure (20/20 points)
----------------------------------------------
Program stucture checks out and looks well formed

Construction of the abstract syntax tree and coverage of all language elements (30/30 points)
----------------------------------------------

Indentation of Blocks (10 points)
Nicely done! Indenting is consistent

Parentheses Display: (10 points)
Good job! Parentheses only appear where necessary.

Spacing of Expressions: (10 points)
Expressions formatting appears to be correct

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
